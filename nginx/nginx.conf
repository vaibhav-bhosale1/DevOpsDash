# nginx/nginx.conf
# Main Nginx configuration for the Cloud Analytics Dashboard.

worker_processes auto; # Automatically determine the number of worker processes based on CPU cores

events {
    worker_connections 1024; # Maximum number of simultaneous connections that can be opened by a worker process
}

http {
    include /etc/nginx/mime.types; # Include standard MIME types
    default_type application/octet-stream; # Default MIME type

    sendfile on; # Enable sendfile for efficient file transfers
    keepalive_timeout 65; # Timeout for keep-alive connections

    # --- Server Block for HTTP (Port 80) ---
    server {
        listen 80; # Listen for HTTP traffic on port 80
        server_name 127.0.0.1; # Replace with your actual domain name or EC2 public IP

        # Location block for Certbot's ACME challenge (for SSL certificate renewal)
        location /.well-known/acme-challenge/ {
            root /var/www/certbot; # Certbot will place challenge files here
        }

        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # --- Server Block for HTTPS (Port 443) ---
    server {
        listen 443 ssl; # Listen for HTTPS traffic on port 443
        127.0.0.1; # Replace with your actual domain name or EC2 public IP

        # SSL certificate paths (these will be generated by Certbot)
        ssl_certificate /etc/letsencrypt/live/127.0.0.1/fullchain.pem; # Full chain certificate
        ssl_certificate_key /etc/letsencrypt/live/127.0.0.1/privkey.pem; # Private key

        # SSL configuration for security
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3; # Only allow strong TLS protocols
        ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
        ssl_prefer_server_ciphers on;

        # --- Frontend Proxy ---
        # All requests to the root path (e.g., your_domain_name.com/) will go to the React frontend
        location / {
            proxy_pass http://frontend:80; # Proxy to the frontend service (defined in docker-compose) on port 80
            proxy_set_header Host $host; # Pass the original Host header
            proxy_set_header X-Real-IP $remote_addr; # Pass the client's real IP address
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Pass the client's IP through proxies
            proxy_set_header X-Forwarded-Proto $scheme; # Pass the original protocol (http/https)
            # This is crucial for single-page applications (SPAs) like React.
            # If a file is not found, it tries to serve index.html, allowing React Router to handle routing.
            try_files $uri $uri/ /index.html;
        }

        # --- Backend API Proxy ---
        # All requests starting with /api/ (e.g., your_domain_name.com/api/prices) will go to the FastAPI backend
        location /api/ {
            proxy_pass http://backend:8000/api/; # Proxy to the backend service (defined in docker-compose) on port 8000
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Ensure the /api/ prefix is handled correctly by the backend
            # rewrite ^/api/(.*)$ /$1 break; # Uncomment if your backend expects /prices instead of /api/prices
        }

        # --- Prometheus UI Proxy ---
        # Access Prometheus UI via your_domain_name.com/prometheus/
        location /prometheus/ {
            proxy_pass http://prometheus:9090/; # Proxy to Prometheus service on port 9090
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # For Prometheus UI, ensure correct base path
            rewrite ^/prometheus/(.*)$ /$1 break;
        }

        # --- Grafana UI Proxy ---
        # Access Grafana UI via your_domain_name.com/grafana/
        location /grafana/ {
            proxy_pass http://grafana:3000/; # Proxy to Grafana service on port 3000
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # For Grafana UI, ensure correct base path
            rewrite ^/grafana/(.*)$ /$1 break;
        }
    }
}
